Питання: коли використовувати постфікс "ся", а коли "сь".

Рішення: робити так, як в Абабагаламаги.

==== hedrok

Мій метод (я під Linux):

.Хай ми все робимо в директорії `$root'.

.Беремо всі можливі словоформи з ВеСУМ:

-----
cd $root;
git clone https://github.com/brown-uk/dict_uk
cd dict_uk
./gradlew expand
-----

Тепер в нас має зʼявитися файл `$root/dict_uk/out/dict_corp_lt.txt',
кожен рядок якого містить словоформу в першому стовпчику.

.Отримуємо файл зі словоформами, для яких є паралельні форми на сь/ся:

----
cd $root;
# Залишаємо лише перший стовпчик:
awk '{print $1}' $root/dict_uk/out/dict_corp_lt.txt | sort | uniq > list-all.txt;
# Прибираємо всі словоформи, що не закінчуються на сь/ся
grep -e 'сь$' -e 'ся$' list-all.txt > list-s-sja.txt
# Прибираємо останню літеру (ь або я)
sed -i 's/[ья]$//' list-s-sja.txt
# Підраховуємо кількість однакових
uniq -c list-s-sja.txt > list-s-sja-with-count.txt
# Тепер 2 стоїть перед тими словоформами, що мають паралельні форми
# на сь/ся:
awk '/2 / {print $2}' list-s-sja-with-count.txt > result.txt
----

Після цього в нас є список усіх слів, що можуть завершуватися на сь/ся
у файлі result.txt (тільки вони без останньої літери).

.Підготуємо тексти. Прибираємо все, крім літер, апострофу, пробілів та знаків пунктуації.

----
export texts=/path/Harr*.fb2
cd $root
# Зливаємо всі тексти в один файл
cat $texts > input.txt;
# Хай який там апостроф, у result.txt використовується '
sed -i "s/[ʼ’]/'/g" input.txt;
# Тире й трикрапки замінюємо на ascii символи:
sed -i 's/—/-/g' input.txt;
sed -i 's/…/.../g' input.txt;
# Залишаємо лише слова зі знаками пунктуації, що нас цікавлсять.
grep -o -e "[абвгґдеєжзиіїйклмнопрстуфхцчшщьюяАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯ]\([абвгґдеєжзиіїйклмнопрстуфхцчшщьюяАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯ'-]*[абвгґдеєжзиіїйклмнопрстуфхцчшщьюяАБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯ]\)\?" -e "[.\!?,:-]\+" input.txt > input-clean.txt
awk '{printf $0 " ";}' input-clean.txt > input-clean-oneline.txt
----

.Підраховуємо кількість зустрічей цих слів з сь/ся

потрібно встановити модуль suffix-trees:

----
pip install suffix-trees
----

python скрипт:

----
#!/usr/bin/python
# -*- coding: utf-8 -*-

import re
from suffix_trees import STree

patterns = ['[аеиіоу]', '[бвгґджзйклмнпрстфхцчшщь]', '[єїюя]', '[.\!?]', '[,:-]']
progs = {}
for p in patterns:
   progs[p] = re.compile(p)
letters = ['ь', 'я'];
counters = {}
for p in patterns:
    counters[p] = {}
    for l in letters:
        counters[p][l] = 0.;

text = ''
with open('input-clean-oneline.txt') as f:
    text = f.read()
tree = STree.STree(text)
print("Tree initialized")

with open('result.txt') as f:
    for w in f:
        w = w.strip()
        for pos in tree.find_all(w):
            # not start of word
            if text[pos - 1] != ' ':
               continue
            pos += len(w)
            if text[pos + 1] != ' ':
               continue;
            l = text[pos]
            if l not in letters:
               print("Something is wrong for '" + w + "', position: " + str(pos) + ", next letter: '" + l + "'");
               continue
            n = text[pos + 2]
            for p in patterns:
                counters[p][l] += len(progs[p].findall(n))

print("pattern: ь; я;")
for p in patterns:
    s = p + ":"
    for l in letters:
        s += " " + str(counters[p][l]) + ";"
    print(s)
    
----

.Результат (у result.txt 137598 словоформ):

Скрипт працює менше чотирьох хвилин.

[width="15%",options="header"]
|====
| |ь |я
|голосні (крім йотованих) |120 |976
|приголосні |103 |14952
|єїюя |12 |223
|.!? |214 |3564
|,:- |229 |4397
|====
